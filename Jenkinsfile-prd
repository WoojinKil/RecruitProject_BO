@Grab('org.yaml:snakeyaml:1.17')
import org.yaml.snakeyaml.Yaml
import org.yaml.snakeyaml.DumperOptions
import static org.yaml.snakeyaml.DumperOptions.FlowStyle.BLOCK

node {

    def MVN_HOME

    stage('init') {
        echo "Current workspace : ${WORKSPACE}"
        SONAR_SCANNER_HOME = tool 'sonar-scanner4' 
        MVN_HOME = tool 'maven3'
    }

    stage('project-clone'){
        git (
    	    branch: "${buildTag}",
		    credentialsId: "${codeCommitCredentialsId}",
		    url: "https://git-codecommit.ap-northeast-2.amazonaws.com/v1/repos/ldps-bdp"
	    )
    }

    stage('project-build'){
        dir("${WORKSPACE}/pandora3"){
            sh "'${MVN_HOME}/bin/mvn' clean install -DskipTests=true"
        }
    }   
    /*
    stage('sonar-deploy') {
        dir("${WORKSPACE}/pandora3") {
            withSonarQubeEnv("SONARQUBE_SITE") {
                sh """
                    ${SONAR_SCANNER_HOME}/bin/sonar-scanner \
                    -Dsonar.projectKey=ldps-prd-bdp \
                    -Dsonar.projectName=ldps-prd-bdp \
                    -Dsonar.sourceEncoding=UTF-8 \
                    -Dsonar.projectBaseDir=${WORKSPACE}/pandora3 \
                    -Dsonar.sources=src \
                    -Dsonar.language=java \
                    -Dsonar.java.source=1.8 \
                    -Dsonar.java.binaries=target/classes
                    
                """
            }
        }
    }
 
    stage('sonar-quality-gate'){ 
        timeout(time: 5, unit: 'MINUTES') { 
            def qg = waitForQualityGate() 
            echo "Quality Gate Status > ${qg.status}" 
            if (qg.status != 'OK') { 
        build job: 'ldps-common-jira/ldps-common-jira-issue-publish', parameters: [ 
          [$class: 'StringParameterValue', name: 'issueId', value: "${issueId}"], 
          [$class: 'StringParameterValue', name: 'stageId', value: "deploy-quality-fail"] 
        ] 
                currentBuild.result = 'UNSTABLE' 
            } 
        } 
    } 
    */
    stage('deploy'){
        dir("${WORKSPACE}/pandora3"){

            def appspecYml = readYaml file: 'appspec.yml'
            appspecYml.files[0].destination = "/data/was/tomcat/apache-tomcat-8.5.41/webapps" as String
            appspecYml.permissions[0].object = "/data/was/tomcat/apache-tomcat-8.5.41/webapps" as String
            appspecYml.hooks.ApplicationStop[0].location = "scripts/stop-application.sh" as String
            appspecYml.hooks.ApplicationStart[0].location = "scripts/start-application.sh" as String
            writeFile file:"appspec.yml", text: yamlToString(appspecYml)

            withCredentials([[$class: 'AmazonWebServicesCredentialsBinding', accessKeyVariable: 'AWS_ACCESS_KEY_ID', credentialsId: "${awsCredentialsId}", secretKeyVariable: 'AWS_SECRET_ACCESS_KEY']]) {
                step([$class: 'AWSCodeDeployPublisher',
                      applicationName: 'ldps-prd-bdp',
                      awsAccessKey: "${AWS_ACCESS_KEY_ID}",
                      awsSecretKey: "${AWS_SECRET_ACCESS_KEY}",
                      credentials: 'awsAccessKey',
                      deploymentConfig: 'CodeDeployDefault.OneAtATime',
                      deploymentGroupAppspec: false,
                      deploymentGroupName: 'ldps-prd-bdp-group',
                      excludes: '',
                      iamRoleArn: '',
                      includes: '**',
                      proxyHost: '',
                      proxyPort: 0,
                      region: 'ap-northeast-2',
                      s3bucket: 'ldps-cicd.mgmt',
                      s3prefix: "artifact/prd/ldps-bdp",
                      subdirectory: '',
                      versionFileName: '',
                      waitForCompletion: true,
                      pollingTimeoutSec: 1800 
                ])
            }
        }
    }
}

@NonCPS
static String yamlToString(Object data){
    def opts = new DumperOptions()
    opts.setDefaultFlowStyle(BLOCK)
    return new Yaml(opts).dump(data)
}