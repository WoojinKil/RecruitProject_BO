package kr.co.ta9.pandora3.pmbr.dao;

import java.util.HashMap;
import java.util.List;

import org.json.simple.JSONObject;
import org.springframework.stereotype.Repository;

import kr.co.ta9.pandora3.app.repository.BaseDao;
import kr.co.ta9.pandora3.app.servlet.ParameterMap;
import kr.co.ta9.pandora3.pcommon.dto.TmbrUsrInf;

/**
 * TmbrUsrInfDao - DAO(Data Access Object) class for table [TMBR_USR_INF].
 *
 * <pre>
 *   Generated by CodeProcessor. You can freely modify this generated file.
 *   Copyright &amp;copy 2004 by Pionnet, Inc. All rights reserved.
 * </pre>
 *
 * @since 2019. 02. 16
 */
@Repository
public class TmbrUsrInfDao extends BaseDao {

	/**
	 * 사용자 리스트 조회
	 * @param  parameterMap
	 * @return List<TmbrUsrInf>
	 * @throws Exception
	 */
	public List<TmbrUsrInf> selectTmbrUsrInfList(ParameterMap parameterMap) throws Exception {
		return getSqlSession().selectList("TmbrUsrInf.selectTmbrUsrInfList", parameterMap);
	}
	
	/**
	 * 사용자 그리드 리스트 조회
	 * @param  parameterMap
	 * @return JSONObject
	 * @throws Exception
	 */
	public JSONObject selectTmbrUsrInfGridList(ParameterMap parameterMap) throws Exception {
		return queryForGrid("TmbrUsrInf.selectTmbrUsrInfGridList", parameterMap);
	}
	
	/**
	 * 사용자  조회(단건)
	 * @param  parameterMap
	 * @return TmbrUsrInf
	 * @throws Exception
	 */
	public TmbrUsrInf selectTmbrUsrInf(ParameterMap parameterMap) throws Exception {
		return getSqlSession().selectOne("TmbrUsrInf.selectTmbrUsrInfList", parameterMap);
	}
	
	/**
	 * 이메일 변경 시 인증여부 확인
	 * @param  param
	 * @return String
	 * @throws Exception
	 */
	public String selectTmbrUsrInfChkChgCtfEml(HashMap<String, Object> param) throws Exception {
		return getSqlSession().selectOne("TmbrUsrInf.selectTmbrUsrInfChkChgCtfEml", param);
	}
	
	/**
	 * 회원아이디 유효성 확인(중복/금지어)
	 * @param  lgn_id
	 * @return String
	 * @throws Exception
	 */
	public String selectTmbrUsrInfChkUsrId(String lgn_id) throws Exception {
		return getSqlSession().selectOne("TmbrUsrInf.selectTmbrUsrInfChkUsrId", lgn_id);
	}
	
	/**
	 * 이메일 유효성 확인(중복)
	 * @param  lgn_id
	 * @return String
	 * @throws Exception
	 */
	public Integer selectTmbrUsrInfChkEml(String lgn_id) throws Exception {
		return getSqlSession().selectOne("TmbrUsrInf.selectTmbrUsrInfChkEml", lgn_id);
	}
	
	/**
	 * 회원정보관리 회원 상세 조회(단건)
	 * @param  parameterMap
	 * @return TmbrUsrInf
	 * @throws Exception
	 */
	public TmbrUsrInf selectTmbrUsrInfDtl(ParameterMap parameterMap) throws Exception {
		return getSqlSession().selectOne("TmbrUsrInf.selectTmbrUsrInfDtl", parameterMap);
	}
	
	/**
	 * 이메일수신여부 Y 목록 조회
	 * @return List<TmbrUsrInf>
	 */
	public List<TmbrUsrInf> selectTmbrUsrInfEmlRcvYList() {
		return getSqlSession().selectList("TmbrUsrInf.selectTmbrUsrInfEmlRcvYList");
	}
	
	/**
	 * User Grid List
	 * @param parameterMap
	 * @return JSONObject
	 * @throws Exception
	 */
	public JSONObject selectSysUserGridList(ParameterMap parameterMap) throws Exception {
		return queryForGrid("TmbrUsrInf.selectSysUserGridList", parameterMap);
	}
	
	
	/**
	 * 이메일 중복 확인
	 * Check Email Overlap
	 * @param email
	 * @return
	 */
	public String selectTmbrUsrInfChkEmlDpl(String email) throws Exception {
		return getSqlSession().selectOne("TmbrUsrInf.selectTmbrUsrInfChkEmlDpl", email);
	}

	/**
	 * 회원가입 > 회원아이디 유효성 확인(중복/금지어)
	 * @param login_id
	 * @return
	 * @throws Exception
	 */
	public String chkSysUserId(String login_id) throws Exception {
		return getSqlSession().selectOne("TmbrUsrInf.chkSysUserId", login_id);
	}
	
	/**
	 * 회원가입 > 이메일 유니크 확인(중복/금지어)
	 * @param login_id
	 * @return
	 * @throws Exception
	 */
	public Integer chkSysUserEmail(String email) throws Exception {
		return getSqlSession().selectOne("TmbrUsrInf.chkSysUserEmail", email);
	}
	
	/**
	 * 이메일 변경시 인증여부 확인
	 * @param email
	 * @return
	 */
	public String chkChgCertEmail(HashMap<String, Object> param) {
		return getSqlSession().selectOne("TmbrUsrInf.chkChgCertEmail", param);
	}

	/**
	 * 회원정보관리 > 회원 상세 조회(BO)
	 * @param parameterMap
	 * @return SysUser
	 * @throws Exception
	 */
	public TmbrUsrInf selectSysUserDtl(ParameterMap parameterMap) throws Exception {
		return getSqlSession().selectOne("TmbrUsrInf.selectSysUserDtl", parameterMap);
	}

	/**
	 * 메일 허용 사용자 리스트
	 * @return
	 */
	public List<TmbrUsrInf> getSendMailOkUserList() {
		return getSqlSession().selectList("TmbrUsrInf.getSendMailOkUserList");
	}
	
	
	/**
	 * 마이페이지 : 사용자 수정
	 * @param  parameterMap
	 * @return int
	 * @throws Exception
	 */
	public int updateTmbrUsrInfMyPageInfo(ParameterMap parameterMap) throws Exception{
		return getSqlSession().update("TmbrUsrInf.updateTmbrUsrInfMyPageInfo", parameterMap);
	}
	
	/**
	 * 사용자 비밀번호 변경
	 * @param  tmbrUsrInf
	 * @return int
	 * @throws Exception
	 */
	public int updateTmbrUsrInfPwChg(TmbrUsrInf tmbrUsrInf) throws Exception {
		return getSqlSession().update("TmbrUsrInf.updateTmbrUsrInfPwChg", tmbrUsrInf);
	}
	
	/**
	 * 사용자 비밀번호 변경(ParameterMap)
	 * @param  parameterMap
	 * @return int
	 * @throws Exception
	 */
	public int updateTmbrUsrInfPwChg(ParameterMap parameterMap) throws Exception {
		return getSqlSession().update("TmbrUsrInf.updateTmbrUsrInfPwChgMap", parameterMap);
	}
	
	/**
	 * 최종로그인 정보 변경
	 * @param  tmbrUsrInf
	 * @return int
	 * @throws Exception
	 */
	public int updateTmbrUsrInfLastLogin(TmbrUsrInf tmbrUsrInf) throws Exception {
		return getSqlSession().update("TmbrUsrInf.updateTmbrUsrInfLastLogin", tmbrUsrInf);
	}
	
	/**
	 * 사용자 비밀번호 변경일 변경 (ParameterMap)
	 * @param  parameterMap
	 * @return int
	 * @throws Exception
	 */
	public int updateTmbrUsrInfPwChgDate(ParameterMap parameterMap) throws Exception {
		return getSqlSession().update("TmbrUsrInf.updateTmbrUsrInfPwChgDate", parameterMap);
	}
	
	/**
	 * 패스워드 실패횟수 초기화
	 * @param  tmbrUsrInf
	 * @return int
	 * @throws Exception
	 */
	public int updateTmbrUsrInfInitUserPwInfo(TmbrUsrInf tmbrUsrInf) throws Exception {
		return getSqlSession().update("TmbrUsrInf.updateTmbrUsrInfInitUserPwInfo", tmbrUsrInf);
	}
	
	/**
	 * 사용자 패스워드 정보 초기화
	 * @param  tmbrUsrInf
	 * @return int
	 * @throws Exception
	 */
	public int updateTmbrUsrInfInitPwd(TmbrUsrInf tmbrUsrInf) throws Exception {
		return getSqlSession().update("TmbrUsrInf.updateTmbrUsrInfInitPwd", tmbrUsrInf);
	}
	
	/**
	 * 회원 상태 코드 탈퇴 처리
	 * @param  tmbrUsrInf
	 * @return int
	 * @throws Exception
	 */
	public int updateTmbrUsrInfUsrSsCd(ParameterMap parameterMap) throws Exception {
		return getSqlSession().update("TmbrUsrInf.updateTmbrUsrInfUsrSsCd", parameterMap);
	}

}